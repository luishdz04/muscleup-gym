 const express = require('express');
const cors = require('cors');
const http = require('http');
const WebSocketServer = require('websocket').server;
const path = require('path');
const fs = require('fs');
const { createClient } = require('@supabase/supabase-js');

// Cargar variables de entorno
try {
    require('dotenv').config();
    console.log('‚úÖ Variables de entorno cargadas');
} catch (error) {
    console.log('‚ÑπÔ∏è No se encontr√≥ archivo .env, usando valores por defecto');
}

// ===============================================
// ‚úÖ CONFIGURACI√ìN B√ÅSICA
// ===============================================
const PORT = process.env.PORT || 4001;
const WS_PORT = process.env.WS_PORT || 8080;
const HOST = '127.0.0.1';
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://tuproyecto.supabase.co';
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || 'tu-clave-de-servicio-de-supabase';

// Inicializar cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

console.log('üöÄ ZK Access Agent - SDK EXISTENTE REAL');
console.log(`üìÖ ${new Date().toISOString()}`);
console.log(`üë§ luishdz04 - Muscle Up GYM`);
console.log(`üìÇ Directorio: ${__dirname}`);
console.log('üìä Cliente Supabase inicializado');

// Importar el controlador F22
const F22Controller = require('./src/devices/f22Controller');

// ===============================================
// ‚úÖ VARIABLES GLOBALES
// ===============================================
let wsServer = null;
let httpServer = null;
let connectedClients = new Set();
let zkSDK = null;
let fingerprintCapture = null;
let logger = null;
let isZkConnected = false;
let deviceInfo = null;
let f22Controller = null; // Controlador para F22

// M√≥dulos SDK
let ZKFingerprintSDK = null;
let FingerprintCapture = null;

// ===============================================
// ‚úÖ VERIFICACIONES INICIALES
// ===============================================
function checkDependencies() {
    console.log('üîç Verificando dependencias...');
    
    const requiredModules = ['express', 'cors', 'websocket', '@supabase/supabase-js', 'dotenv'];
    let allFound = true;
    
    requiredModules.forEach(module => {
        try {
            require(module);
            console.log(`‚úÖ ${module} encontrado`);
        } catch (error) {
            console.error(`‚ùå ${module} no encontrado`);
            allFound = false;
        }
    });
    
    return allFound;
}

function checkFileStructure() {
    console.log('üìÅ Verificando estructura de archivos...');
    
    const critical = [
        { path: 'src/sdk/zkSDK.js', required: true },
        { path: 'src/sdk/fingerprintCapture.js', required: true },
        { path: 'src/utils/logger.js', required: false },
        { path: 'dll/libzkfp.dll', required: false }
    ];
    
    let criticalMissing = false;
    
    critical.forEach(item => {
        const fullPath = path.join(__dirname, item.path);
        const exists = fs.existsSync(fullPath);
        
        if (exists) {
            console.log(`‚úÖ ${item.path}`);
        } else {
            console.log(`${item.required ? '‚ùå' : '‚ö†Ô∏è'} ${item.path} ${item.required ? 'FALTANTE' : 'opcional'}`);
            if (item.required) criticalMissing = true;
        }
    });
    
    return !criticalMissing;
}

// ===============================================
// ‚úÖ CARGA SEGURA DE M√ìDULOS SDK
// ===============================================
function loadSDKModules() {
    console.log('üì¶ Cargando m√≥dulos SDK...');
    
    try {
        // Cargar ZKFingerprintSDK
        try {
            ZKFingerprintSDK = require('./src/sdk/zkSDK');
            console.log('‚úÖ zkSDK.js cargado');
        } catch (error) {
            console.error('‚ùå Error cargando zkSDK.js:', error.message);
            return false;
        }
        
        // Cargar FingerprintCapture
        try {
            FingerprintCapture = require('./src/sdk/fingerprintCapture');
            console.log('‚úÖ fingerprintCapture.js cargado');
        } catch (error) {
            console.warn('‚ö†Ô∏è fingerprintCapture.js no disponible:', error.message);
            FingerprintCapture = null;
        }
        
        // Cargar logger
        try {
            logger = require('./src/utils/logger');
            console.log('‚úÖ logger.js cargado');
        } catch (error) {
            console.warn('‚ö†Ô∏è logger.js no disponible, usando console');
            logger = console;
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error cr√≠tico cargando m√≥dulos:', error);
        return false;
    }
}

// ===============================================
// ‚úÖ INICIALIZACI√ìN DEL SDK ZKFECO - CORREGIDO
// ===============================================
async function initializeZKSDK() {
    console.log('üñêÔ∏è Inicializando SDK ZKTeco...');
    
    try {
        if (!ZKFingerprintSDK) {
            throw new Error('Clase ZKFingerprintSDK no disponible');
        }
        
        // Verificar DLL
        const dllPath = path.join(__dirname, 'dll', 'libzkfp.dll');
        const dllExists = fs.existsSync(dllPath);
        
        if (!dllExists) {
            console.warn('‚ö†Ô∏è libzkfp.dll no encontrado en dll/');
            console.log('üìã Notas sobre libzkfp.dll:');
            console.log('   - Es necesario para comunicaci√≥n con dispositivos ZKTeco');
            console.log('   - Debe ser proporcionado por ZKTeco SDK');
            console.log('   - Verificar compatibilidad (32-bit/64-bit)');
            console.log('   - El servidor funcionar√° pero sin capturas reales');
            
            deviceInfo = { 
                type: 'ZKTeco', 
                status: 'dll_missing', 
                message: 'libzkfp.dll requerido para conexi√≥n real',
                timestamp: new Date().toISOString() 
            };
            return false;
        } else {
            console.log('‚úÖ libzkfp.dll encontrado');
        }
        
        // Crear instancia del SDK
        console.log('üîß Creando instancia ZKFingerprintSDK...');
        zkSDK = new ZKFingerprintSDK();
        
        // ‚≠ê PASO CR√çTICO: INICIALIZAR EL SDK ANTES DE CONECTAR
        console.log('üöÄ Inicializando SDK interno...');
        try {
            await zkSDK.initialize();
            console.log('‚úÖ SDK interno inicializado correctamente');
        } catch (initError) {
            console.error('‚ùå Error en inicializaci√≥n del SDK:', initError.message);
            throw initError;
        }
        
        // Verificar m√©todos cr√≠ticos
        const requiredMethods = ['connect', 'captureFingerprint', 'getDeviceInfo'];
        const missingMethods = requiredMethods.filter(method => typeof zkSDK[method] !== 'function');
        
        if (missingMethods.length > 0) {
            console.warn('‚ö†Ô∏è M√©todos faltantes en SDK:', missingMethods);
        } else {
            console.log('‚úÖ Todos los m√©todos SDK disponibles');
        }
        
        // Verificar m√©todos de comparaci√≥n (nuevos)
        const verificationMethods = ['compareTemplates', 'identifyFingerprint'];
        const hasVerificationMethods = verificationMethods.some(method => typeof zkSDK[method] === 'function');
        
        if (hasVerificationMethods) {
            console.log('‚úÖ M√©todos de verificaci√≥n de huellas disponibles');
            
            // Configurar umbral √≥ptimo para verificaci√≥n
            if (typeof zkSDK.setVerificationThreshold === 'function') {
                zkSDK.setVerificationThreshold(60); // 60% es un buen balance entre seguridad y usabilidad
                console.log('‚úÖ Umbral de verificaci√≥n configurado al 60%');
            }
        } else {
            console.warn('‚ö†Ô∏è M√©todos de verificaci√≥n no encontrados - se usar√° comparaci√≥n b√°sica');
        }
        
        // AHORA S√ç intentar conectar dispositivo
        console.log('üîå Intentando conectar dispositivo ZKTeco...');
        
        try {
            const connected = await zkSDK.connect();
            
            if (connected) {
                isZkConnected = true;
                
                // Obtener info del dispositivo
                deviceInfo = zkSDK.getDeviceInfo();
                console.log('üìã Dispositivo conectado:', deviceInfo);
                
                // Inicializar m√≥dulo de captura
                if (FingerprintCapture) {
                    fingerprintCapture = new FingerprintCapture(zkSDK);
                    console.log('‚úÖ M√≥dulo de captura inicializado');
                }
                
                console.log('üéâ ¬°SDK ZKTECO CONECTADO EXITOSAMENTE!');
                console.log('üñêÔ∏è ¬°Dispositivo listo para capturar huellas!');
                
            } else {
                console.warn('‚ö†Ô∏è No se pudo conectar al dispositivo ZKTeco');
                console.log('üîß Verificaciones sugeridas:');
                console.log('   1. Dispositivo conectado via USB y encendido');
                console.log('   2. Drivers ZKTeco instalados correctamente');
                console.log('   3. Ejecutar como administrador');
                console.log('   4. Puerto USB funcional y con alimentaci√≥n');
                console.log('   5. Probar con software demo oficial ZKTeco');
                isZkConnected = false;
            }
            
        } catch (connectError) {
            console.warn('‚ö†Ô∏è Error conectando dispositivo:', connectError.message);
            console.log('üîß El SDK est√° inicializado pero el dispositivo no responde');
            isZkConnected = false;
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error inicializando SDK ZKTeco:', error);
        isZkConnected = false;
        
        // Informaci√≥n de debugging
        console.log('üîç Informaci√≥n de debugging:');
        console.log(`   - Error: ${error.message}`);
        console.log(`   - DLL Path: ${path.join(__dirname, 'dll', 'libzkfp.dll')}`);
        console.log(`   - Node Version: ${process.version}`);
        console.log(`   - Platform: ${process.platform} ${process.arch}`);
        
        deviceInfo = {
            type: 'ZKTeco',
            status: 'initialization_failed',
            error: error.message,
            timestamp: new Date().toISOString()
        };
        
        return false;
    }
}

// ===============================================
// ‚úÖ COMPARACI√ìN DE TEMPLATES DE HUELLAS
// ===============================================
async function compareTemplates(template1, template2) {
    try {
        console.log('üîç Usando m√©todo alternativo de comparaci√≥n binaria');
        
        // Convertir templates a buffers
        const buf1 = Buffer.from(template1, 'base64');
        const buf2 = Buffer.from(template2, 'base64');
        
        // Calcular similitud comparando bytes
        let matchingBytes = 0;
        let totalWeight = 0;
        const minLength = Math.min(buf1.length, buf2.length);
        
        // Comparar solo los primeros X bytes que contienen la informaci√≥n caracter√≠stica
        const bytesToCompare = Math.min(minLength, 256);
        
        // Dar mayor peso a los primeros bytes (generalmente m√°s significativos)
        for (let i = 0; i < bytesToCompare; i++) {
            // Factor de peso: decrece a medida que avanzamos en el template
            const weight = 1 - (i / bytesToCompare * 0.5); // 1.0 -> 0.5
            totalWeight += weight;
            
            // Diferencia entre bytes
            const diff = Math.abs(buf1[i] - buf2[i]);
            
            // Si la diferencia es menor a un umbral, considerarlo como coincidencia
            if (diff <= 5) {
                matchingBytes += weight;
            }
        }
        
        // Calcular score normalizado (0-1)
        const score = matchingBytes / totalWeight;
        
        // Umbral ajustable para control de acceso
        const threshold = 0.55;
        
        return {
            match: score > threshold,
            score: score,
            quality: 85,
            method: 'binary_comparison',
            threshold: threshold
        };
    } catch (error) {
        console.error('‚ùå Error en comparaci√≥n de templates:', error);
        return { match: false, score: 0, error: error.message };
    }
}

// ===============================================
// ‚úÖ VERIFICACI√ìN DE HUELLAS DACTILARES
// ===============================================
async function verifyFingerprint(capturedTemplate, connection) {
    console.log('üîç Iniciando verificaci√≥n de huella real...');
    
    try {
        // 1. Verificar que tenemos un template v√°lido
        if (!capturedTemplate) {
            throw new Error('Template capturado inv√°lido');
        }
        
        console.log('üìä Obteniendo huellas registradas de Supabase...');
        
        // 2. Obtener todas las huellas de la base de datos con la estructura correcta
        const { data: fingerprints, error } = await supabase
            .from('fingerprint_templates')
            .select(`
                id, 
                user_id, 
                template,
                finger_index,
                finger_name,
                average_quality,
                Users:user_id (
                    id, 
                    name, 
                    email, 
                    whatsapp, 
                    membership_type,
                    profilePictureUrl,
                    membership_type,
                    firstName,
                    lastName
                )
            `);
        
        if (error) {
            throw new Error(`Error obteniendo huellas: ${error.message}`);
        }
        
        if (!fingerprints || fingerprints.length === 0) {
            console.log('‚ùå No hay huellas registradas para comparar');
            return {
                success: true,
                verified: false,
                message: 'No hay huellas registradas para comparar',
                totalCompared: 0,
                timestamp: new Date().toISOString()
            };
        }
        
        console.log(`‚úÖ ${fingerprints.length} huellas obtenidas de la BD`);
        
        // Si no hay funci√≥n de identificaci√≥n, continuamos con el c√≥digo original
        console.log('üìä Usando comparaci√≥n manual como fallback...');
        
        let bestMatch = null;
        let bestScore = 0;
        let totalCompared = 0;
        
        for (const fingerprint of fingerprints) {
            try {
                // Extraer template almacenado (campo correcto seg√∫n tu esquema)
                const storedTemplate = fingerprint.template;
                
                if (!storedTemplate) {
                    console.warn(`‚ö†Ô∏è Huella ${fingerprint.id} sin template v√°lido`);
                    continue;
                }
                
                totalCompared++;
                
                // Obtener el nombre del usuario para el log
                const userName = fingerprint.Users?.name || 
                                (fingerprint.Users?.firstName && fingerprint.Users?.lastName ? 
                                `${fingerprint.Users.firstName} ${fingerprint.Users.lastName}` : 
                                'Usuario');
                                
                console.log(`üîç Comparando con huella de ${userName}...`);
                
                // Comparar templates
                const comparisonResult = await compareTemplates(capturedTemplate, storedTemplate);
                
                console.log(`üìä Resultado comparaci√≥n: Score ${comparisonResult.score}, Match: ${comparisonResult.match}`);
                
                // Si encontramos una coincidencia mejor, la guardamos
                if (comparisonResult.match && comparisonResult.score > bestScore) {
                    bestMatch = fingerprint;
                    bestScore = comparisonResult.score;
                }
            } catch (compareError) {
                console.error(`‚ùå Error comparando con huella ${fingerprint.id}:`, compareError.message);
                continue;
            }
        }
        
        // 4. Verificar si encontramos coincidencia
        if (bestMatch && bestScore > 0.55) { // Umbral de confianza: 55%
            // Obtener el nombre completo del usuario seg√∫n disponibilidad de campos
            const userName = bestMatch.Users?.name || 
                           (bestMatch.Users?.firstName && bestMatch.Users?.lastName ? 
                           `${bestMatch.Users.firstName} ${bestMatch.Users.lastName}` : 
                           'Usuario');
                           
            console.log(`‚úÖ VERIFICACI√ìN EXITOSA: ${userName} (Score: ${bestScore})`);
            
            // Registrar el acceso en la tabla access_logs
            try {
                const accessLogEntry = {
                    user_id: bestMatch.user_id,
                    access_type: 'entry',
                    access_method: 'fingerprint',
                    success: true,
                    confidence_score: bestScore,
                    membership_status: bestMatch.Users?.membership_type || 'unknown'
                };
                
                const { data: logResult, error: logError } = await supabase
                    .from('access_logs')
                    .insert(accessLogEntry);
                    
                if (logError) {
                    console.warn('‚ö†Ô∏è Error registrando acceso:', logError.message);
                } else {
                    console.log('‚úÖ Acceso registrado correctamente en BD');
                }
            } catch (logError) {
                console.warn('‚ö†Ô∏è Error registrando log de acceso:', logError.message);
            }
            
            return {
                success: true,
                verified: true,
                user: {
                    id: bestMatch.Users?.id,
                    name: userName,
                    email: bestMatch.Users?.email,
                    whatsapp: bestMatch.Users?.whatsapp,
                    membership_type: bestMatch.Users?.membership_type,
                    profilePictureUrl: bestMatch.Users?.profilePictureUrl
                },
                fingerprintId: bestMatch.id,
                fingerName: bestMatch.finger_name,
                quality: bestMatch.average_quality || 85,
                matchScore: bestScore,
                confidence: (bestScore * 100).toFixed(2) + '%',
                verificationMethod: 'ZKTeco SDK',
                totalCompared: totalCompared,
                timestamp: new Date().toISOString(),
                accessGranted: true
            };
        }
        
        // Si llegamos aqu√≠, no hubo coincidencias
        console.log('‚ùå No se encontr√≥ coincidencia con ninguna huella registrada');
        
        // Registrar el intento fallido en access_logs
        try {
            const accessLogEntry = {
                user_id: null, // Usuario desconocido
                access_type: 'denied',
                access_method: 'fingerprint',
                success: false,
                confidence_score: bestScore || 0,
                denial_reason: 'Huella no reconocida'
            };
            
            const { error: logError } = await supabase
                .from('access_logs')
                .insert(accessLogEntry);
                
            if (logError) {
                console.warn('‚ö†Ô∏è Error registrando denegaci√≥n de acceso:', logError.message);
            } else {
                console.log('‚úÖ Denegaci√≥n de acceso registrada correctamente');
            }
        } catch (logError) {
            console.warn('‚ö†Ô∏è Error registrando log de denegaci√≥n:', logError.message);
        }
        
        return {
            success: true,
            verified: false,
            message: 'Huella no reconocida en el sistema',
            totalCompared: totalCompared,
            bestScore: bestScore,
            threshold: 0.55,
            timestamp: new Date().toISOString(),
            accessGranted: false
        };
    } catch (error) {
        console.error('‚ùå Error en verificaci√≥n:', error);
        
        return {
            success: false,
            verified: false,
            error: error.message,
            message: `Error verificando huella: ${error.message}`,
            timestamp: new Date().toISOString(),
            accessGranted: false
        };
    }
}

// ===============================================
// ‚úÖ CAPTURA DE HUELLAS DACTILARES
// ===============================================
async function handleFingerprintCapture(connection, params) {
    console.log('üñêÔ∏è Iniciando proceso de captura...');
    console.log('üìã Par√°metros:', params);
    
    const userId = params.userId || `user_${Date.now()}`;
    const userName = params.userName || 'Usuario';
    const fingerIndex = params.fingerIndex || 1;
    const isVerificationMode = params.client_info?.mode === 'verification';
    
    // Funci√≥n helper para enviar estados
    const sendStatus = (status, message, progress = 0, extra = {}) => {
        if (connection && connection.connected) {
            connection.sendUTF(JSON.stringify({
                type: 'capture_status',
                status,
                message,
                progress,
                userId,
                userName,
                fingerIndex,
                timestamp: new Date().toISOString(),
                ...extra
            }));
        }
    };
    
    try {
        // Validaciones iniciales
        sendStatus('validating', 'üîç Validando configuraci√≥n...', 5);
        
        if (!zkSDK) {
            throw new Error('SDK ZKTeco no inicializado');
        }
        
        if (!isZkConnected) {
            throw new Error('Dispositivo ZKTeco no conectado');
        }
        
        await new Promise(resolve => setTimeout(resolve, 300));
        
        // Preparaci√≥n
        sendStatus('preparing', 'üîß Preparando dispositivo...', 15);
        
        // Verificar conexi√≥n actual
        if (typeof zkSDK.ensureConnection === 'function') {
            const connectionOk = await zkSDK.ensureConnection();
            if (!connectionOk) {
                throw new Error('Dispositivo perdi√≥ conexi√≥n');
            }
        }
        
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Listo para captura
        sendStatus('ready', 'üëÜ COLOQUE EL DEDO EN EL SENSOR', 25, {
            instruction: 'Presione firmemente y mantenga quieto',
            deviceInfo: deviceInfo
        });
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Capturando
        sendStatus('capturing', 'üì∏ Capturando huella dactilar...', 40);
        
        console.log('üñêÔ∏è Ejecutando zkSDK.captureFingerprint()...');
        
        // Verificar m√©todo existe
        if (typeof zkSDK.captureFingerprint !== 'function') {
            throw new Error('M√©todo captureFingerprint no disponible en SDK');
        }
        
        // ¬°CAPTURA REAL!
        const captureResult = await zkSDK.captureFingerprint();
        
        if (!captureResult || !captureResult.success) {
            throw new Error(`Captura fall√≥: ${captureResult?.error || 'Sin detalles'}`);
        }
        
        console.log('‚úÖ Captura exitosa:', captureResult);
        
        // Procesando
        sendStatus('processing', 'üîç Procesando datos biom√©tricos...', 70);
        
        // VERIFICACI√ìN - Si estamos en modo verificaci√≥n
        if (isVerificationMode) {
            console.log('üîê Modo verificaci√≥n detectado, comparando con base de datos...');
            
            sendStatus('verifying', 'üîç Verificando identidad en base de datos...', 80);
            
            // Realizar verificaci√≥n
            const verificationResult = await verifyFingerprint(captureResult.template, connection);
            
            // Enviar resultado de verificaci√≥n
            connection.sendUTF(JSON.stringify({
                type: 'verification_result',
                verified: verificationResult.verified,
                data: verificationResult,
                message: verificationResult.verified ? 
                    `‚úÖ ACCESO PERMITIDO: ${verificationResult.user?.name}` : 
                    `‚ùå ACCESO DENEGADO: ${verificationResult.message || 'Huella no reconocida'}`,
                timestamp: new Date().toISOString()
            }));
            
            // Broadcast del evento
            if (verificationResult.verified) {
                broadcastToClients(JSON.stringify({
                    type: 'access_granted',
                    user: verificationResult.user?.name,
                    userId: verificationResult.user?.id,
                    fingerprintId: verificationResult.fingerprintId,
                    membershipType: verificationResult.user?.membership_type,
                    location: 'Muscle Up GYM',
                    confidence: verificationResult.confidence,
                    timestamp: new Date().toISOString()
                }), connection);
                
                // Log del acceso exitoso
                if (logger && logger.info) {
                    logger.info(`Verificaci√≥n exitosa: ${verificationResult.user?.name || 'Usuario desconocido'}`);
                }
            } else {
                // Broadcast de acceso denegado
                broadcastToClients(JSON.stringify({
                    type: 'access_denied',
                    message: verificationResult.message || 'Huella no reconocida',
                    bestScore: verificationResult.bestScore || 0,
                    threshold: verificationResult.threshold || 0.55,
                    timestamp: new Date().toISOString(),
                    location: 'Muscle Up GYM'
                }), connection);
                
                // Log del acceso fallido
                if (logger && logger.info) {
                    logger.info(`Verificaci√≥n fallida: Usuario desconocido`);
                }
            }
            
            console.log('‚úÖ Verificaci√≥n completada y enviada al cliente');
            return;
        }
        
        // ---- MODO CAPTURA NORMAL (continuamos con el c√≥digo existente) ----
        await new Promise(resolve => setTimeout(resolve, 800));
        
        // Validando calidad
        sendStatus('validating', '‚úÖ Validando calidad del template...', 85);
        await new Promise(resolve => setTimeout(resolve, 600));
        
        // Finalizando
        sendStatus('finalizing', 'üéØ Finalizando captura...', 95);
        await new Promise(resolve => setTimeout(resolve, 400));
        
        // Resultado final
        const finalResult = {
            success: true,
            fingerprintId: `fp_${Date.now()}_${userId}`,
            userId,
            userName,
            fingerIndex,
            template: captureResult.template,
            templateSize: captureResult.templateSize || captureResult.template?.length || 0,
            quality: captureResult.quality || 'good',
            score: captureResult.score || 0,
            method: 'ZKTeco SDK Real',
            deviceType: deviceInfo?.type || 'ZKTeco',
            deviceInfo: deviceInfo,
            captureTime: captureResult.captureTime || 0,
            captureAttempts: captureResult.captureAttempts || 1,
            realCapture: true,
            sdkVersion: '4.0.0',
            luishdz04: true,
            muscleUpGym: true,
            location: 'Muscle Up GYM',
            capturedAt: new Date().toISOString(),
            metadata: {
                serverUptime: Math.floor(process.uptime()),
                clientId: connection.clientId,
                sdkInitialized: true,
                deviceConnected: isZkConnected
            }
        };
        
        // Enviar resultado exitoso
        connection.sendUTF(JSON.stringify({
            type: 'capture_result',
            success: true,
            data: finalResult,
            message: 'üéâ ¬°HUELLA CAPTURADA EXITOSAMENTE!',
            progress: 100,
            timestamp: new Date().toISOString()
        }));
        
        // Broadcast a otros clientes
        broadcastToClients(JSON.stringify({
            type: 'fingerprint_captured',
            data: {
                userId: finalResult.userId,
                userName: finalResult.userName,
                fingerprintId: finalResult.fingerprintId,
                quality: finalResult.quality,
                timestamp: finalResult.capturedAt,
                location: 'Muscle Up GYM'
            },
            message: `üñêÔ∏è Nueva huella: ${finalResult.userName}`,
            timestamp: new Date().toISOString()
        }), connection);
        
        console.log(`‚úÖ üéâ CAPTURA EXITOSA: ${finalResult.userName}`);
        console.log(`üìä ID: ${finalResult.fingerprintId}`);
        console.log(`üìä Calidad: ${finalResult.quality}`);
        console.log(`üìä Tama√±o: ${finalResult.templateSize} bytes`);
        
        // Log con logger si est√° disponible
        if (logger && logger.info) {
            logger.info(`Captura exitosa: ${finalResult.userName} (${finalResult.fingerprintId})`);
        }
        
    } catch (error) {
        console.error('‚ùå ERROR EN CAPTURA:', error);
        
        // Enviar error al cliente
        connection.sendUTF(JSON.stringify({
            type: 'capture_result',
            success: false,
            error: error.message,
            message: `‚ùå Error: ${error.message}`,
            troubleshooting: [
                'Verificar conexi√≥n del dispositivo ZKTeco',
                'Limpiar superficie del sensor',
                'Colocar dedo firmemente en el centro',
                'Verificar que libzkfp.dll existe',
                'Probar con demo oficial de ZKTeco',
                'Ejecutar como administrador',
                'Verificar drivers instalados',
                'Reiniciar dispositivo USB'
            ],
            supportInfo: {
                developer: 'luishdz04',
                location: 'Muscle Up GYM',
                contact: 'Reportar en GitHub Issues',
                timestamp: new Date().toISOString()
            },
            timestamp: new Date().toISOString()
        }));
        
        // Log del error
        if (logger && logger.error) {
            logger.error(`Error captura ${userName}: ${error.message}`);
        }
    }
}

// ===============================================
// ‚úÖ WEBSOCKET SERVER
// ===============================================
function initializeWebSocket() {
    try {
        console.log(`üåê Iniciando WebSocket Server puerto ${WS_PORT}...`);
        
        httpServer = http.createServer((request, response) => {
            response.writeHead(200, { 'Content-Type': 'text/plain' });
            response.end('ZK Access Agent WebSocket Server Running');
        });
        
        httpServer.listen(WS_PORT, HOST, () => {
            console.log(`‚úÖ WebSocket HTTP Server: http://${HOST}:${WS_PORT}`);
        });
        
        wsServer = new WebSocketServer({
            httpServer: httpServer,
            autoAcceptConnections: true
        });
        
        wsServer.on('connect', (connection) => {
            const clientId = `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            connection.clientId = clientId;
            
            connectedClients.add(connection);
            
            console.log(`üéâ Cliente WebSocket conectado: ${clientId}`);
            console.log(`üë• Total clientes conectados: ${connectedClients.size}`);
            
            // Mensaje de bienvenida
            connection.sendUTF(JSON.stringify({
                type: 'welcome',
                message: 'üéâ ¬°Conectado al ZK Access Agent!',
                clientId: clientId,
                timestamp: new Date().toISOString(),
                serverInfo: {
                    version: '4.0.0-production',
                    developer: 'luishdz04',
                    location: 'Muscle Up GYM',
                    mode: 'real_sdk_capture',
                    uptime: Math.floor(process.uptime()),
                    deviceConnected: isZkConnected,
                    deviceInfo: deviceInfo,
                    sdkInitialized: zkSDK ? true : false,
                    features: [
                        'real_fingerprint_capture',
                        'websocket_communication',
                        'multi_client_support',
                        'device_status_monitoring',
                        'fingerprint_verification'
                    ]
                }
            }));
            
            // Manejar mensajes del cliente
            connection.on('message', (message) => {
                try {
                    if (message.type === 'utf8') {
                        const data = JSON.parse(message.utf8Data);
                        console.log(`üì® Mensaje de ${clientId}: ${data.action || data.type}`);
                        
                        handleWebSocketMessage(connection, data);
                    }
                } catch (error) {
                    console.error(`‚ùå Error procesando mensaje de ${clientId}:`, error);
                    
                    connection.sendUTF(JSON.stringify({
                        type: 'error',
                        message: 'Error procesando mensaje',
                        error: error.message,
                        timestamp: new Date().toISOString()
                    }));
                }
            });
            
            // Manejar desconexi√≥n
            connection.on('close', (reasonCode, description) => {
                connectedClients.delete(connection);
                console.log(`üîå Cliente ${clientId} desconectado (${reasonCode})`);
                console.log(`üë• Clientes restantes: ${connectedClients.size}`);
            });
            
            connection.on('error', (error) => {
                console.error(`‚ùå Error WebSocket ${clientId}:`, error);
                connectedClients.delete(connection);
            });
            
            // Enviar estado inicial despu√©s de conexi√≥n
            setTimeout(() => {
                if (connection.connected) {
                    connection.sendUTF(JSON.stringify({
                        type: 'initial_status',
                        data: {
                            deviceConnected: isZkConnected,
                            deviceInfo: deviceInfo,
                            serverUptime: Math.floor(process.uptime()),
                            clientsConnected: connectedClients.size,
                            sdkStatus: {
                                loaded: !!ZKFingerprintSDK,
                                initialized: zkSDK ? true : false,
                                connected: isZkConnected,
                                captureReady: !!(zkSDK && isZkConnected),
                                verificationReady: !!(zkSDK && typeof zkSDK.compareTemplates === 'function')
                            }
                        },
                        timestamp: new Date().toISOString()
                    }));
                }
            }, 1000);
        });
        
        console.log(`‚úÖ üåê WebSocket Server ACTIVO: ws://${HOST}:${WS_PORT}`);
        return true;
        
    } catch (error) {
        console.error('‚ùå Error iniciando WebSocket Server:', error);
        return false;
    }
}

// ===============================================
// ‚úÖ MANEJO DE MENSAJES WEBSOCKET
// ===============================================
async function handleWebSocketMessage(connection, data) {
    const { action, type, ...params } = data;
    const command = action || type;
    
    console.log(`üìã Ejecutando comando: ${command}`);
    
    try {
        switch (command) {
            case 'ping':
                connection.sendUTF(JSON.stringify({
                    type: 'pong',
                    timestamp: new Date().toISOString(),
                    uptime: Math.floor(process.uptime()),
                    clientId: connection.clientId,
                    serverStatus: 'running',
                    deviceStatus: isZkConnected ? 'connected' : 'disconnected',
                    memoryUsage: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + 'MB'
                }));
                break;
                
            case 'capture_fingerprint':
                await handleFingerprintCapture(connection, params);
                break;
                
            case 'verify_fingerprint':
                if (!params.template) {
                    throw new Error('Template requerido para verificaci√≥n');
                }
                
                const verificationResult = await verifyFingerprint(params.template, connection);
                
                connection.sendUTF(JSON.stringify({
                    type: 'verification_result',
                    verified: verificationResult.verified,
                    data: verificationResult,
                    timestamp: new Date().toISOString()
                }));
                break;
                case 'get_device_status':
                let statusData = {
                    connected: isZkConnected,
                    deviceInfo: deviceInfo,
                    sdkLoaded: !!ZKFingerprintSDK,
                    sdkInitialized: zkSDK ? true : false,
                    captureModuleLoaded: !!FingerprintCapture,
                    serverUptime: Math.floor(process.uptime()),
                    connectedClients: connectedClients.size,
                    lastUpdate: new Date().toISOString()
                };
                
                // Obtener estado actualizado del SDK
                if (zkSDK && isZkConnected) {
                    try {
                        if (typeof zkSDK.getDeviceStatus === 'function') {
                            statusData.currentStatus = await zkSDK.getDeviceStatus();
                        }
                        if (typeof zkSDK.isDeviceConnected === 'function') {
                            statusData.deviceOnline = zkSDK.isDeviceConnected();
                        }
                    } catch (error) {
                        statusData.statusError = error.message;
                    }
                }
                
                connection.sendUTF(JSON.stringify({
                    type: 'device_status',
                    data: statusData,
                    timestamp: new Date().toISOString()
                }));
                break;
                
            case 'test_connection':
                let testResult = false;
                let testMessage = '';
                
                try {
                    if (!zkSDK) {
                        testMessage = 'SDK no inicializado';
                    } else if (!isZkConnected) {
                        testMessage = 'Dispositivo no conectado';
                    } else {
                        // Probar conexi√≥n
                        if (typeof zkSDK.ensureConnection === 'function') {
                            testResult = await zkSDK.ensureConnection();
                            testMessage = testResult ? 'Conexi√≥n verificada exitosamente' : 'Dispositivo no responde';
                        } else {
                            testResult = true;
                            testMessage = 'SDK disponible (m√©todo de prueba limitado)';
                        }
                    }
                } catch (error) {
                    testMessage = `Error en prueba: ${error.message}`;
                }
                
                connection.sendUTF(JSON.stringify({
                    type: 'test_result',
                    success: testResult,
                    message: testResult ? `‚úÖ ${testMessage}` : `‚ùå ${testMessage}`,
                    timestamp: new Date().toISOString()
                }));
                break;
                
            case 'reconnect_device':
                try {
                    connection.sendUTF(JSON.stringify({
                        type: 'reconnect_status',
                        message: 'üîÑ Intentando reconectar dispositivo...',
                        timestamp: new Date().toISOString()
                    }));
                    
                    // Desconectar primero si est√° conectado
                    if (zkSDK && typeof zkSDK.disconnect === 'function') {
                        await zkSDK.disconnect();
                        isZkConnected = false;
                    }
                    
                    // Intentar reconectar
                    const reconnected = await initializeZKSDK();
                    
                    connection.sendUTF(JSON.stringify({
                        type: 'reconnect_result',
                        success: reconnected,
                        message: reconnected ? 
                            '‚úÖ Dispositivo reconectado exitosamente' : 
                            '‚ùå No se pudo reconectar el dispositivo',
                        deviceInfo: reconnected ? deviceInfo : null,
                        timestamp: new Date().toISOString()
                    }));
                    
                } catch (error) {
                    connection.sendUTF(JSON.stringify({
                        type: 'reconnect_result',
                        success: false,
                        error: error.message,
                        message: `‚ùå Error en reconexi√≥n: ${error.message}`,
                        timestamp: new Date().toISOString()
                    }));
                }
                break;
                
            case 'get_server_info':
                connection.sendUTF(JSON.stringify({
                    type: 'server_info',
                    data: {
                        version: '4.0.0-production',
                        developer: 'luishdz04',
                        location: 'Muscle Up GYM',
                        currentTime: new Date().toISOString(),
                        startTime: new Date(Date.now() - process.uptime() * 1000).toISOString(),
                        uptime: Math.floor(process.uptime()),
                        nodeVersion: process.version,
                        platform: process.platform,
                        architecture: process.arch,
                        workingDirectory: __dirname,
                        connectedClients: connectedClients.size,
                        memoryUsage: process.memoryUsage(),
                        features: [
                            'ZKTeco SDK Integration',
                            'Real Fingerprint Capture',
                            'Fingerprint Verification',
                            'Supabase Integration',
                            'WebSocket Communication',
                            'Multi-client Support',
                            'Device Status Monitoring',
                            'Error Recovery',
                            'Logging System'
                        ]
                    },
                    timestamp: new Date().toISOString()
                }));
                break;
                
            case 'get_recent_access_logs':
                try {
                    // Consultar los √∫ltimos registros de acceso
                    const { data: accessLogs, error: logsError } = await supabase
                        .from('access_logs')
                        .select(`
                            id,
                            user_id,
                            access_type,
                            access_method,
                            success,
                            confidence_score,
                            created_at,
                            Users:user_id (
                                id,
                                name,
                                email,
                                profilePictureUrl,
                                membership_type
                            )
                        `)
                        .order('created_at', { ascending: false })
                        .limit(10);
                        
                    if (logsError) {
                        throw new Error(`Error obteniendo logs: ${logsError.message}`);
                    }
                    
                    connection.sendUTF(JSON.stringify({
                        type: 'access_logs_result',
                        data: accessLogs,
                        count: accessLogs.length,
                        timestamp: new Date().toISOString()
                    }));
                } catch (error) {
                    connection.sendUTF(JSON.stringify({
                        type: 'access_logs_error',
                        error: error.message,
                        timestamp: new Date().toISOString()
                    }));
                }
                break;
                
            case 'get_access_config':
                try {
                    // Consultar la configuraci√≥n de acceso
                    const { data: accessConfig, error: configError } = await supabase
                        .from('access_control_config')
                        .select('*')
                        .limit(1)
                        .single();
                        
                    if (configError) {
                        throw new Error(`Error obteniendo configuraci√≥n: ${configError.message}`);
                    }
                    
                    connection.sendUTF(JSON.stringify({
                        type: 'access_config_result',
                        data: accessConfig,
                        timestamp: new Date().toISOString()
                    }));
                } catch (error) {
                    connection.sendUTF(JSON.stringify({
                        type: 'access_config_error',
                        error: error.message,
                        timestamp: new Date().toISOString()
                    }));
                }
                break;
                
            default:
                connection.sendUTF(JSON.stringify({
                    type: 'error',
                    message: `‚ùå Comando no soportado: ${command}`,
                    availableCommands: [
                        'ping',
                        'capture_fingerprint',
                        'verify_fingerprint',
                        'get_device_status',
                        'test_connection',
                        'reconnect_device',
                        'get_server_info',
                        'get_recent_access_logs',
                        'get_access_config'
                    ],
                    timestamp: new Date().toISOString()
                }));
        }
    } catch (error) {
        console.error(`‚ùå Error manejando comando ${command}:`, error);
        
        connection.sendUTF(JSON.stringify({
            type: 'command_error',
            command: command,
            error: error.message,
            message: `Error ejecutando comando: ${command}`,
            timestamp: new Date().toISOString()
        }));
    }
}

// ===============================================
// ‚úÖ BROADCAST A CLIENTES CONECTADOS
// ===============================================
function broadcastToClients(message, excludeConnection = null) {
    if (!wsServer || connectedClients.size === 0) return;
    
    let sentCount = 0;
    let errorCount = 0;
    
    connectedClients.forEach((client) => {
        if (client !== excludeConnection && client.connected) {
            try {
                client.sendUTF(message);
                sentCount++;
            } catch (error) {
                console.error('‚ùå Error enviando mensaje a cliente:', error);
                connectedClients.delete(client);
                errorCount++;
            }
        }
    });
    
    if (sentCount > 0) {
        console.log(`üì° Broadcast enviado a ${sentCount} clientes${errorCount > 0 ? ` (${errorCount} errores)` : ''}`);
    }
}

// ===============================================
// ‚úÖ EXPRESS SERVER
// ===============================================
const app = express();

// Middleware de seguridad mejorado
app.use(cors({
    origin: [
        'http://localhost:3000', 
        'http://127.0.0.1:3000', 
        'http://localhost:3001', 
        'http://127.0.0.1:3001',
        'http://localhost:8080',
        'http://127.0.0.1:8080'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
    optionsSuccessStatus: 200
}));

app.use(express.json({ 
    limit: '10mb',
    strict: true
}));

app.use(express.urlencoded({ 
    extended: true, 
    limit: '10mb',
    parameterLimit: 50
}));

// Middleware de logging mejorado
app.use((req, res, next) => {
    const timestamp = new Date().toISOString();
    const userAgent = req.get('User-Agent') || 'Unknown';
    const ip = req.ip || req.connection.remoteAddress || 'Unknown';
    
    console.log(`üì§ ${req.method} ${req.path} - ${timestamp}`);
    console.log(`   üë§ IP: ${ip}`);
    console.log(`   üåê User-Agent: ${userAgent.substring(0, 50)}...`);
    
    // Agregar headers de seguridad
    res.setHeader('X-Powered-By', 'ZK Access Agent v4.0.0');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');
    
    next();
});

// Middleware de manejo de errores de parsing
app.use((error, req, res, next) => {
    if (error instanceof SyntaxError && error.status === 400 && 'body' in error) {
        console.error('‚ùå Error de parsing JSON:', error);
        return res.status(400).json({
            success: false,
            message: 'JSON inv√°lido en el body de la petici√≥n',
            error: 'Syntax Error',
            timestamp: new Date().toISOString()
        });
    }
    next();
});

// ===============================================
// ‚úÖ RUTAS HTTP MEJORADAS
// ===============================================

// Ruta principal con m√°s informaci√≥n
app.get('/', (req, res) => {
    res.json({
        message: 'üñêÔ∏è ZK Access Agent - SDK Existente Real',
        version: '4.0.0-production',
        developer: 'luishdz04',
        location: 'Muscle Up GYM',
        timestamp: new Date().toISOString(),
        status: 'running',
        uptime: Math.floor(process.uptime()),
        device: {
            connected: isZkConnected,
            info: deviceInfo,
            lastCheck: new Date().toISOString()
        },
        sdk: {
            initialized: zkSDK ? true : false,
            ready: !!(zkSDK && isZkConnected)
        },
        communication: {
            websocket: `ws://${HOST}:${WS_PORT}`,
            http: `http://${HOST}:${PORT}`,
            connectedClients: connectedClients.size
        },
        endpoints: {
            info: '/api/info',
            status: '/api/status',
            device: '/api/device',
            health: '/api/health',
            logs: '/api/logs',
            verify: '/api/verify',
            recentAccess: '/api/access/recent'
        },
        features: [
            'Real ZKTeco SDK Integration',
            'WebSocket Real-time Communication',
            'Fingerprint Verification',
            'Supabase Integration',
            'Multi-client Support',
            'Device Status Monitoring',
            'Error Recovery & Logging',
            'REST API Complete'
        ]
    });
});

// ===============================================
// ‚úÖ RUTAS F22 - NUEVAS
// ===============================================

// Ruta para probar la conexi√≥n con F22
app.get('/api/test-f22-connection', async (req, res) => {
  try {
    const f22Ip = req.query.ip || process.env.F22_IP || '192.168.1.201';
    const f22Port = parseInt(req.query.port || process.env.F22_PORT || '4370');
    
    if (!f22Controller) {
      f22Controller = new F22Controller();
    }
    
    const result = await f22Controller.testConnection(f22Ip, f22Port);
    res.json(result);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: `Error al probar conexi√≥n con F22: ${error.message}`,
      error: error.message
    });
  }
});

// Ruta para sincronizar huellas con F22
app.post('/api/sync-fingerprint', async (req, res) => {
  try {
    const { userId, deviceUserId, userName, template } = req.body;
    
    if (!deviceUserId || !userName || !template) {
      return res.status(400).json({
        success: false,
        message: 'Faltan datos requeridos (deviceUserId, userName, template)'
      });
    }
    
    if (!f22Controller) {
      f22Controller = new F22Controller();
    }
    
    const f22Ip = process.env.F22_IP || '192.168.1.201';
    const f22Port = parseInt(process.env.F22_PORT || '4370');
    
    // Conectar
    const connectResult = await f22Controller.connect(f22Ip, f22Port);
    if (!connectResult.success) {
      return res.status(500).json(connectResult);
    }
    
    // Sincronizar huella
    const syncResult = await f22Controller.syncFingerprint(
      deviceUserId,
      userName,
      template
    );
    
    // Desconectar despu√©s de sincronizar
    await f22Controller.disconnect();
    
    res.json(syncResult);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: `Error sincronizando huella: ${error.message}`,
      error: error.message
    });
  }
});

// Informaci√≥n del sistema con m√°s detalles
app.get('/api/info', (req, res) => {
    const memUsage = process.memoryUsage();
    
    res.json({
        success: true,
        message: 'ZK Access Agent - Informaci√≥n del Sistema',
        data: {
            version: '4.0.0-production',
            mode: 'real_sdk_capture',
            developer: 'luishdz04',
            location: 'Muscle Up GYM',
            system: {
                uptime: Math.floor(process.uptime()),
                startTime: new Date(Date.now() - process.uptime() * 1000).toISOString(),
                nodeVersion: process.version,
                platform: process.platform,
                architecture: process.arch,
                workingDirectory: __dirname,
                processId: process.pid
            },
            memory: {
                heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024),
                heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024),
                external: Math.round(memUsage.external / 1024 / 1024),
                rss: Math.round(memUsage.rss / 1024 / 1024)
            },
            communication: {
                websocket: `ws://${HOST}:${WS_PORT}`,
                http: `http://${HOST}:${PORT}`,
                connectedClients: connectedClients.size
            },
            modules: {
                zkSDK: !!ZKFingerprintSDK,
                sdkInitialized: zkSDK ? true : false,
                fingerprintCapture: !!FingerprintCapture,
                logger: !!logger,
                wsServer: !!wsServer,
                supabase: !!supabase
            },
            device: {
                connected: isZkConnected,
                info: deviceInfo,
                lastStatusCheck: new Date().toISOString()
            }
        },
        timestamp: new Date().toISOString()
    });
});

// Estado del dispositivo con verificaci√≥n en tiempo real
app.get('/api/device', async (req, res) => {
    try {
        let deviceStatus = {
            connected: isZkConnected,
            deviceInfo: deviceInfo,
            sdkLoaded: !!ZKFingerprintSDK,
            sdkInitialized: zkSDK ? true : false,
            captureReady: !!(zkSDK && isZkConnected),
            lastCheck: new Date().toISOString()
        };
        
        // Verificaci√≥n adicional si est√° conectado
        if (zkSDK && isZkConnected) {
            try {
                if (typeof zkSDK.isDeviceConnected === 'function') {
                    deviceStatus.realTimeStatus = zkSDK.isDeviceConnected();
                }
                if (typeof zkSDK.getDeviceInfo === 'function') {
                    deviceStatus.currentDeviceInfo = zkSDK.getDeviceInfo();
                }
            } catch (error) {
                deviceStatus.statusError = error.message;
                deviceStatus.statusErrorTime = new Date().toISOString();
            }
        }
        
        res.json({
            success: true,
            data: deviceStatus,
            message: isZkConnected ? 'Dispositivo conectado y operativo' : 'Dispositivo no conectado',
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error verificando estado del dispositivo',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Nueva ruta API para verificaci√≥n de huellas
app.post('/api/verify', async (req, res) => {
    try {
        const { template } = req.body;
        
        if (!template) {
            return res.status(400).json({
                success: false,
                message: 'Template de huella requerido',
                timestamp: new Date().toISOString()
            });
        }
        
        // Verificar la huella
        const result = await verifyFingerprint(template, null);
        
        res.json({
            success: result.success,
            verified: result.verified,
            data: result,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error verificando huella',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Estado general del servidor con m√©tricas detalladas
app.get('/api/status', (req, res) => {
    const memUsage = process.memoryUsage();
    const loadAverage = process.platform !== 'win32' ? require('os').loadavg() : [0, 0, 0];
    
    res.json({
        success: true,
        status: 'running',
        server: {
            uptime: Math.floor(process.uptime()),
            startTime: new Date(Date.now() - process.uptime() * 1000).toISOString(),
            version: '4.0.0-production',
            environment: process.env.NODE_ENV || 'development'
        },
        performance: {
            memory: {
                used: Math.round(memUsage.heapUsed / 1024 / 1024),
                total: Math.round(memUsage.heapTotal / 1024 / 1024),
                external: Math.round(memUsage.external / 1024 / 1024),
                rss: Math.round(memUsage.rss / 1024 / 1024)
            },
            loadAverage: loadAverage,
            cpuUsage: process.cpuUsage()
        },
        connections: {
            websocket: {
                active: connectedClients.size,
                serverRunning: !!wsServer
            },
            http: {
                status: 'active',
                port: PORT,
                host: HOST
            }
        },
        device: {
            status: isZkConnected ? 'connected' : 'disconnected',
            type: deviceInfo?.type || 'unknown',
            lastUpdate: deviceInfo?.timestamp || 'never',
            sdkInitialized: zkSDK ? true : false
        },
        timestamp: new Date().toISOString()
    });
});

// Health check mejorado con m√°s verificaciones
app.get('/api/health', async (req, res) => {
    const health = {
        status: 'healthy',
        checks: {
            server: 'ok',
            websocket: wsServer ? 'ok' : 'error',
            sdk: ZKFingerprintSDK ? 'ok' : 'warning',
            sdkInitialized: zkSDK ? 'ok' : 'warning',
            device: isZkConnected ? 'ok' : 'warning',
            memory: 'ok',
            modules: 'ok',
            supabase: supabase ? 'ok' : 'warning'
        },
        metrics: {
            uptime: Math.floor(process.uptime()),
            connectedClients: connectedClients.size,
            memoryUsage: Math.round(process.memoryUsage().heapUsed / 1024 / 1024)
        },
        timestamp: new Date().toISOString()
    };
    
    // Verificaci√≥n de memoria
    const memoryUsage = process.memoryUsage().heapUsed / 1024 / 1024;
    if (memoryUsage > 500) {
        health.checks.memory = 'warning';
    }
        if (memoryUsage > 1000) {
        health.checks.memory = 'error';
    }
    
    // Verificaci√≥n de m√≥dulos cr√≠ticos
    if (!ZKFingerprintSDK || !wsServer) {
        health.checks.modules = 'warning';
    }
    
    // Verificaci√≥n adicional del dispositivo si es posible
    if (zkSDK && isZkConnected) {
        try {
            if (typeof zkSDK.isDeviceConnected === 'function') {
                const deviceOnline = zkSDK.isDeviceConnected();
                if (!deviceOnline) {
                    health.checks.device = 'warning';
                    health.deviceNote = 'SDK dice que el dispositivo est√° desconectado';
                }
            }
        } catch (error) {
            health.checks.device = 'error';
            health.deviceError = error.message;
        }
    }
    
    // Verificaci√≥n de Supabase
    if (supabase) {
        try {
            // Prueba simple de conectividad a Supabase
            const { data, error } = await supabase.from('fingerprint_templates').select('count').limit(1);
            if (error) {
                health.checks.supabase = 'warning';
                health.supabaseError = error.message;
            }
        } catch (error) {
            health.checks.supabase = 'error';
            health.supabaseError = error.message;
        }
    }
    
    const hasErrors = Object.values(health.checks).includes('error');
    const hasWarnings = Object.values(health.checks).includes('warning');
    
    if (hasErrors) {
        health.status = 'unhealthy';
        res.status(500);
    } else if (hasWarnings) {
        health.status = 'degraded';
        res.status(200);
    }
    
    res.json(health);
});

// Nueva ruta para logs b√°sicos
app.get('/api/logs', (req, res) => {
    const logs = {
        serverStart: new Date(Date.now() - process.uptime() * 1000).toISOString(),
        uptime: Math.floor(process.uptime()),
        events: {
            serverStarted: true,
            sdkLoaded: !!ZKFingerprintSDK,
            sdkInitialized: zkSDK ? true : false,
            deviceConnected: isZkConnected,
            websocketActive: !!wsServer,
            currentClients: connectedClients.size,
            supabaseConnected: !!supabase
        },
        lastActivity: new Date().toISOString(),
        version: '4.0.0-production',
        timestamp: '2025-06-17 20:11:52',
        user: 'luishdz04'
    };
    
    res.json({
        success: true,
        data: logs,
        message: 'Logs b√°sicos del sistema',
        timestamp: new Date().toISOString()
    });
});

// Nueva ruta para accesos recientes
app.get('/api/access/recent', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 10;
        
        // Consultar registros recientes de acceso
        const { data: accessLogs, error } = await supabase
            .from('access_logs')
            .select(`
                id,
                user_id,
                access_type,
                access_method,
                success,
                confidence_score,
                created_at,
                denial_reason,
                Users:user_id (
                    id, 
                    name,
                    firstName,
                    lastName, 
                    email, 
                    whatsapp,
                    membership_type,
                    profilePictureUrl
                )
            `)
            .order('created_at', { ascending: false })
            .limit(limit);
            
        if (error) {
            throw new Error(`Error consultando accesos: ${error.message}`);
        }
        
        // Procesar datos para mostrar informaci√≥n m√°s completa
        const processedLogs = accessLogs.map(log => {
            const userName = log.Users ? 
                (log.Users.name || `${log.Users.firstName || ''} ${log.Users.lastName || ''}`.trim()) : 
                'Usuario desconocido';
                
            return {
                ...log,
                userName,
                accessResult: log.success ? 'Permitido' : 'Denegado',
                accessTime: new Date(log.created_at).toLocaleString(),
                confidencePercent: log.confidence_score ? `${(log.confidence_score * 100).toFixed(1)}%` : 'N/A'
            };
        });
        
        res.json({
            success: true,
            data: processedLogs,
            count: processedLogs.length,
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error obteniendo registros de acceso',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// CORRECCI√ìN PRINCIPAL: Manejo de rutas 404 SIN usar asterisco
app.use((req, res) => {
    res.status(404).json({
        success: false,
        message: 'Endpoint no encontrado',
        requestedPath: req.path,
        requestedMethod: req.method,
        availableEndpoints: [
            '/',
            '/api/info',
            '/api/device', 
            '/api/status', 
            '/api/health',
            '/api/logs',
            '/api/verify',
            '/api/access/recent',
            '/api/test-f22-connection',
            '/api/sync-fingerprint'
        ],
        suggestion: 'Verificar la URL y m√©todo HTTP',
        timestamp: new Date().toISOString()
    });
});

// Manejo de errores generales mejorado
app.use((error, req, res, next) => {
    console.error('‚ùå Error HTTP:', error);
    
    // Log del error si logger est√° disponible
    if (logger && logger.error) {
        logger.error(`HTTP Error ${req.method} ${req.path}:`, error);
    }
    
    res.status(500).json({
        success: false,
        message: 'Error interno del servidor',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Error interno',
        requestId: `req_${Date.now()}`,
        timestamp: new Date().toISOString()
    });
});

// ===============================================
// ‚úÖ FUNCI√ìN PRINCIPAL DE INICIO
// ===============================================
async function startServer() {
    try {
        console.log('üéâ ========================================= üéâ');
        console.log(`  ZK ACCESS AGENT - INICIO DEL SISTEMA`);
        console.log(`  Desarrollado por: luishdz04`);
        console.log(`  Ubicaci√≥n: Muscle Up GYM`);
        console.log(`  Versi√≥n: 4.0.0-production`);
        console.log(`  Fecha: 2025-06-17 20:11:52`);
        console.log('üéâ ========================================= üéâ');
        console.log('');
        
        // Paso 1: Verificar dependencias
        console.log('üìã PASO 1: Verificando dependencias...');
        const depsOk = checkDependencies();
        if (!depsOk) {
            throw new Error('Dependencias faltantes - ejecuta: npm install @supabase/supabase-js dotenv');
        }
        console.log('‚úÖ Todas las dependencias encontradas');
        console.log('');
        
        // Paso 2: Verificar estructura de archivos
        console.log('üìã PASO 2: Verificando estructura de archivos...');
        const structureOk = checkFileStructure();
        if (!structureOk) {
            throw new Error('Archivos cr√≠ticos faltantes');
        }
        console.log('‚úÖ Estructura de archivos v√°lida');
        console.log('');
        
        // Paso 3: Cargar m√≥dulos SDK
        console.log('üìã PASO 3: Cargando m√≥dulos SDK...');
        const modulesOk = loadSDKModules();
        if (!modulesOk) {
            throw new Error('No se pudieron cargar los m√≥dulos SDK');
        }
        console.log('‚úÖ M√≥dulos SDK cargados exitosamente');
        console.log('');
        
        // Paso 4: Inicializar SDK ZKTeco
        console.log('üìã PASO 4: Inicializando SDK ZKTeco...');
        const sdkOk = await initializeZKSDK();
        if (sdkOk) {
            console.log('‚úÖ SDK ZKTeco inicializado correctamente');
        } else {
            console.log('‚ö†Ô∏è SDK inicializado con limitaciones');
        }
        console.log('');
        
        // Paso 5: Probar conexi√≥n Supabase
        console.log('üìã PASO 5: Verificando conexi√≥n a Supabase...');
        try {
            const { data, error } = await supabase.from('fingerprint_templates').select('count');
            
            if (error) {
                console.warn('‚ö†Ô∏è Error probando conexi√≥n a Supabase:', error.message);
                console.log('   Verificar NEXT_PUBLIC_SUPABASE_URL y SUPABASE_SERVICE_ROLE_KEY en archivo .env');
            } else {
                console.log('‚úÖ Conexi√≥n a Supabase verificada correctamente');
            }
        } catch (supabaseError) {
            console.warn('‚ö†Ô∏è No se pudo conectar a Supabase:', supabaseError.message);
        }
        console.log('');
        
        // Paso 6: Inicializar controlador F22
        console.log('üìã PASO 6: Inicializando controlador F22...');
        try {
            f22Controller = new F22Controller();
            console.log('‚úÖ Controlador F22 inicializado correctamente');
        } catch (f22Error) {
            console.warn('‚ö†Ô∏è Error inicializando controlador F22:', f22Error.message);
            console.log('   Verificar que zkemkeeper.dll est√° en la carpeta dll/');
            f22Controller = null;
        }
        console.log('');
        
        // Paso 7: Iniciar servidor HTTP
        console.log('üìã PASO 7: Iniciando servidor HTTP...');
        
        // Manejo de errores del servidor HTTP
        const server = app.listen(PORT, HOST, () => {
            console.log(`‚úÖ Servidor HTTP corriendo en: http://${HOST}:${PORT}`);
        });
        
        server.on('error', (error) => {
            if (error.code === 'EADDRINUSE') {
                console.error(`‚ùå Puerto ${PORT} ya est√° en uso`);
                console.log('üí° Soluciones:');
                console.log(`   - Cambiar puerto: set PORT=4002 && node app.js`);
                console.log(`   - Matar proceso: taskkill /F /IM node.exe`);
                console.log(`   - Verificar procesos: netstat -ano | findstr :${PORT}`);
                process.exit(1);
            } else {
                console.error('‚ùå Error en servidor HTTP:', error);
                process.exit(1);
            }
        });
        
        console.log('');
        
        // Paso 8: Iniciar WebSocket
        console.log('üìã PASO 8: Iniciando WebSocket Server...');
        const wsOk = initializeWebSocket();
        if (wsOk) {
            console.log('‚úÖ WebSocket Server activo');
        } else {
            console.log('‚ùå Error iniciando WebSocket');
        }
        console.log('');
        
        // Resumen final
        console.log('üéØ ========================================= üéØ');
        console.log('           RESUMEN DE INICIALIZACI√ìN');
        console.log('üéØ ========================================= üéØ');
        console.log(`HTTP Server:     ${server ? '‚úÖ' : '‚ùå'} Puerto ${PORT}`);
        console.log(`WebSocket:       ${wsOk ? '‚úÖ' : '‚ùå'} Puerto ${WS_PORT}`);
        console.log(`SDK Modules:     ${modulesOk ? '‚úÖ' : '‚ùå'}`);
        console.log(`SDK Initialized: ${zkSDK ? '‚úÖ' : '‚ùå'} ${zkSDK ? 'Inicializado' : 'No inicializado'}`);
        console.log(`ZKTeco Device:   ${isZkConnected ? '‚úÖ' : '‚ö†Ô∏è'} ${isZkConnected ? 'Conectado' : 'No conectado'}`);
        console.log(`F22 Controller:  ${f22Controller ? '‚úÖ' : '‚ö†Ô∏è'} ${f22Controller ? 'Inicializado' : 'No inicializado'}`);
        console.log(`Supabase:        ${supabase ? '‚úÖ' : '‚ùå'} ${supabase ? 'Conectado' : 'No conectado'}`);
        console.log(`Dependencies:    ${depsOk ? '‚úÖ' : '‚ùå'}`);
        console.log(`File Structure:  ${structureOk ? '‚úÖ' : '‚ùå'}`);
        console.log('');
        
        if (server && wsOk && modulesOk) {
            console.log('üöÄ ¬°SERVIDOR COMPLETAMENTE OPERATIVO!');
            console.log('');
            console.log('üì± Conexiones disponibles:');
            console.log(`   üåê HTTP:      http://${HOST}:${PORT}`);
            console.log(`   üîå WebSocket: ws://${HOST}:${WS_PORT}`);
            console.log('');
            console.log('üñêÔ∏è Funcionalidades activas:');
            console.log(`   ${isZkConnected ? '‚úÖ' : '‚ö†Ô∏è'} Captura de huellas dactilares`);
            console.log(`   ${supabase ? '‚úÖ' : '‚ö†Ô∏è'} Verificaci√≥n de huellas con Supabase`);
            console.log(`   ${f22Controller ? '‚úÖ' : '‚ö†Ô∏è'} Control de acceso F22`);
            console.log('   ‚úÖ Comunicaci√≥n WebSocket');
            console.log('   ‚úÖ API REST completa');
            console.log('   ‚úÖ Monitoreo de dispositivos');
            console.log('   ‚úÖ Soporte multi-cliente');
            console.log('   ‚úÖ Manejo de errores robusto');
            console.log('   ‚úÖ Logging y m√©tricas');
            console.log('');
            
            if (!isZkConnected) {
                console.log('‚ö†Ô∏è NOTAS IMPORTANTES:');
                console.log('   ‚Ä¢ Dispositivo ZKTeco no conectado');
                console.log('   ‚Ä¢ SDK est√° inicializado correctamente');
                console.log('   ‚Ä¢ Verificar que el dispositivo est√© encendido');
                console.log('   ‚Ä¢ Probar desconectar y reconectar USB');
                console.log('   ‚Ä¢ Revisar drivers ZKTeco instalados');
                console.log('   ‚Ä¢ Verificar cable USB y alimentaci√≥n del dispositivo');
                console.log('   ‚Ä¢ Ejecutar como administrador si es necesario');
                console.log('');
            } else {
                console.log('üéâ ¬°DISPOSITIVO ZKTECO CONECTADO Y LISTO!');
                console.log('   ‚Ä¢ Puedes capturar huellas dactilares reales');
                console.log('   ‚Ä¢ Verificaci√≥n de acceso con huellas almacenadas');
                console.log('   ‚Ä¢ Usa el WebSocket para comunicaci√≥n en tiempo real');
                console.log('   ‚Ä¢ API REST disponible para integraciones');
                console.log('');
            }
            
            if (!f22Controller) {
                console.log('‚ö†Ô∏è NOTAS SOBRE F22:');
                console.log('   ‚Ä¢ Controlador F22 no inicializado');
                console.log('   ‚Ä¢ Verificar que zkemkeeper.dll existe en dll/');
                console.log('   ‚Ä¢ Asegurarse de instalar node-ffi-napi y ref-napi');
                console.log('   ‚Ä¢ Verificar IP y puerto del F22 en .env');
                console.log('');
            } else {
                console.log('üéâ ¬°CONTROLADOR F22 INICIALIZADO!');
                console.log('   ‚Ä¢ Puedes sincronizar huellas con el F22');
                console.log('   ‚Ä¢ Usa /api/test-f22-connection para verificar conexi√≥n');
                console.log('   ‚Ä¢ Usa /api/sync-fingerprint para enviar huellas al dispositivo');
                console.log('');
            }
        } else {
            console.log('‚ö†Ô∏è SERVIDOR INICIADO CON LIMITACIONES');
            console.log('   Revisar errores arriba para m√°s detalles');
            console.log('');
        }
        
        console.log('üí™ Muscle Up GYM - Sistema de Control de Acceso');
        console.log('üë®‚Äçüíª Desarrollado por luishdz04');
        console.log(`üìÖ ${new Date().toLocaleString()}`);
        console.log('');
        
    } catch (error) {
        console.error('‚ùå ERROR CR√çTICO AL INICIAR SERVIDOR:', error);
        console.log('');
        console.log('üîß POSIBLES SOLUCIONES:');
        console.log('   1. Verificar que todos los archivos est√©n presentes');
        console.log('   2. Ejecutar: npm install @supabase/supabase-js dotenv node-ffi-napi ref-napi');
        console.log('   3. Verificar permisos de archivos');
        console.log('   4. Ejecutar como administrador');
        console.log('   5. Verificar puerto no est√© en uso');
        console.log('   6. Verificar Node.js versi√≥n compatible');
        console.log('   7. Revisar firewall y antivirus');
        console.log('   8. Crear archivo .env con NEXT_PUBLIC_SUPABASE_URL y SUPABASE_SERVICE_ROLE_KEY');
        console.log('');
        process.exit(1);
    }
}

// ===============================================
// ‚úÖ MANEJO DE CIERRE LIMPIO MEJORADO
// ===============================================
process.on('SIGINT', async () => {
    console.log('\nüßπ Cerrando ZK Access Agent...');
    
    try {
        // Notificar a clientes conectados
        if (connectedClients.size > 0) {
            console.log('üì¢ Notificando cierre a clientes conectados...');
            broadcastToClients(JSON.stringify({
                type: 'server_shutdown',
                message: 'Servidor cerr√°ndose...',
                reason: 'Manual shutdown',
                timestamp: new Date().toISOString()
            }));
            
            // Dar tiempo para que se env√≠en los mensajes
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        // Limpiar SDK ZKTeco
        if (zkSDK && typeof zkSDK.cleanup === 'function') {
            console.log('üßπ Limpiando recursos SDK ZKTeco...');
            try {
                await zkSDK.cleanup();
                console.log('‚úÖ SDK ZKTeco limpiado correctamente');
            } catch (error) {
                console.error('‚ö†Ô∏è Error limpiando SDK:', error.message);
            }
        }
        
        // Limpiar m√≥dulo de captura
        if (fingerprintCapture && typeof fingerprintCapture.cleanup === 'function') {
            try {
                fingerprintCapture.cleanup();
                console.log('‚úÖ M√≥dulo de captura limpiado');
            } catch (error) {
                console.error('‚ö†Ô∏è Error limpiando m√≥dulo de captura:', error.message);
            }
        }
        
        // Desconectar F22 si est√° conectado
        if (f22Controller) {
            try {
                await f22Controller.disconnect();
                console.log('‚úÖ F22 desconectado correctamente');
            } catch (error) {
                console.error('‚ö†Ô∏è Error desconectando F22:', error.message);
            }
        }
        
        // Cerrar servidores
        if (wsServer) {
            try {
                wsServer.shutDown();
                console.log('‚úÖ WebSocket Server cerrado');
            } catch (error) {
                console.error('‚ö†Ô∏è Error cerrando WebSocket:', error.message);
            }
        }
        
        if (httpServer) {
            try {
                httpServer.close();
                console.log('‚úÖ HTTP Server cerrado');
            } catch (error) {
                console.error('‚ö†Ô∏è Error cerrando HTTP Server:', error.message);
            }
        }
        
        // Log final
        if (logger && logger.info) {
            logger.info('ZK Access Agent cerrado exitosamente');
        }
        
        console.log('‚úÖ ZK Access Agent cerrado exitosamente');
        console.log('üëã ¬°Hasta luego!');
        
    } catch (error) {
        console.error('‚ùå Error durante cierre:', error);
    }
    
    process.exit(0);
});

// Manejo de errores no capturados mejorado
process.on('uncaughtException', (error) => {
    console.error('‚ùå Error no capturado:', error);
    if (logger && logger.error) {
        logger.error('Uncaught Exception:', error);
    }
    console.log('üîÑ Intentando cierre limpio...');
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promesa rechazada:', reason);
    console.error('üìç En promesa:', promise);
    if (logger && logger.error) {
        logger.error('Unhandled Rejection:', reason);
    }
});

// Manejo de advertencias
process.on('warning', (warning) => {
    console.warn('‚ö†Ô∏è Advertencia Node.js:', warning.name, warning.message);
});

// ===============================================
// ‚úÖ INICIAR EL SERVIDOR
// ===============================================
console.log('üñêÔ∏è ZK Access Agent - Inicializando...');
console.log('üë®‚Äçüíª Desarrollado por luishdz04 para Muscle Up GYM');
console.log(`üìÖ ${new Date().toLocaleString()}`);
console.log(`üìÖ Actualizado: 2025-06-17 20:11:52 UTC`);
console.log(`üîß Node.js ${process.version} - ${process.platform} ${process.arch}`);
console.log('');

startServer().catch(error => {
    console.error('‚ùå Error fatal al iniciar:', error);
    process.exit(1);
});