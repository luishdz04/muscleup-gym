#!/usr/bin/env python3
"""
üö® C√ìDIGO DE EMERGENCIA F22 - RESTABLECER CONFIGURACI√ìN
‚úÖ Restaurar configuraci√≥n por defecto
‚úÖ Activar apertura autom√°tica
‚úÖ Habilitar todos los m√©todos de apertura
‚úÖ SALVAR LA SITUACI√ìN
"""

import win32com.client
import pythoncom
import time
import logging

# Setup logging de emergencia
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger('f22_emergency')

CONFIG = {
    'ip': '192.168.1.201',
    'port': 4370,
    'machine_number': 1,
    'timeout': 10,
}

def emergency_reset_f22():
    """üö® FUNCI√ìN DE EMERGENCIA PARA RESTABLECER F22"""
    try:
        logger.info("üö®" * 50)
        logger.info("C√ìDIGO DE EMERGENCIA F22 - RESTABLECIENDO CONFIGURACI√ìN")
        logger.info("üö®" * 50)
        
        # Inicializar COM
        pythoncom.CoInitialize()
        logger.info("‚úÖ COM inicializado")
        
        # Conectar sin eventos
        zkem = win32com.client.Dispatch("zkemkeeper.ZKEM")
        
        # Configurar timeout
        try:
            zkem.SetCommTimeOut(CONFIG['timeout'] * 1000)
        except:
            pass
        
        # Conectar
        logger.info(f"üîó Conectando a {CONFIG['ip']}:{CONFIG['port']}...")
        if not zkem.Connect_Net(CONFIG['ip'], CONFIG['port']):
            logger.error("‚ùå NO SE PUEDE CONECTAR - F22 puede estar completamente bloqueado")
            logger.error("üîß SOLUCIONES F√çSICAS:")
            logger.error("   1. Reiniciar F22 f√≠sicamente (desconectar y conectar)")
            logger.error("   2. Buscar bot√≥n RESET en el F22")
            logger.error("   3. Usar llave f√≠sica si existe")
            logger.error("   4. Verificar alimentaci√≥n el√©ctrica")
            return False
        
        logger.info("‚úÖ CONECTADO AL F22")
        
        # CONFIGURACI√ìN DE EMERGENCIA - RESTAURAR TODO A AUTOM√ÅTICO
        logger.info("üîß APLICANDO CONFIGURACI√ìN DE EMERGENCIA...")
        
        emergency_config = {
            # üö® CR√çTICO: ACTIVAR APERTURA AUTOM√ÅTICA
            "AutoOpenDoor": "1",        # ‚úÖ Apertura AUTOM√ÅTICA
            "VerifyMode": "0",          # ‚úÖ Modo normal (no solo verificaci√≥n)
            "AttState": "1",            # ‚úÖ Estado normal de asistencia
            "WorkCode": "1",            # ‚úÖ C√≥digo de trabajo activo
            
            # üîä ACTIVAR TODOS LOS SONIDOS
            "VoiceOn": "1",             # ‚úÖ Sonidos ACTIVADOS
            "KeyVoice": "1",            # ‚úÖ Sonido de teclas
            "SuccessVoice": "1",        # ‚úÖ Sonido de √©xito
            "ErrorVoice": "1",          # ‚úÖ Sonido de error
            
            # üîì ACTIVAR TODOS LOS CONTROLES DE APERTURA
            "LockOn": "1",              # ‚úÖ Control de cerradura
            "DoorDelay": "5",           # ‚úÖ 5 segundos de apertura
            "LockDelay": "1",           # ‚úÖ Delay de cerradura
            "UseDoorSensor": "0",       # ‚úÖ Sin sensor de puerta (por si acaso)
            
            # üì° MANTENER TIEMPO REAL PERO PERMITIR AUTONOM√çA
            "Realtime": "1",            # ‚úÖ Tiempo real
            "StandAlone": "1",          # ‚úÖ Modo aut√≥nomo ACTIVADO
            "OfflineWork": "1",         # ‚úÖ Trabajo offline ACTIVADO
            
            # üîê DESACTIVAR RESTRICCIONES
            "MultiVerify": "0",         # ‚úÖ Sin verificaci√≥n m√∫ltiple
            "Encrypt": "0",             # ‚úÖ Sin encriptaci√≥n
            "MThreshold": "80",         # ‚úÖ Umbral de huella bajo
        }
        
        success_count = 0
        
        # Aplicar configuraci√≥n de emergencia
        for option, value in emergency_config.items():
            try:
                if zkem.SetSysOption(CONFIG['machine_number'], option, value):
                    logger.info(f"‚úÖ EMERGENCY: {option} = {value}")
                    success_count += 1
                else:
                    logger.warning(f"‚ö†Ô∏è EMERGENCY: Fall√≥ {option} = {value}")
            except Exception as e:
                logger.debug(f"‚ùå Error en {option}: {e}")
        
        logger.info(f"üîß Configuraci√≥n de emergencia aplicada: {success_count}/{len(emergency_config)}")
        
        # M√âTODOS DE APERTURA DE EMERGENCIA
        logger.info("üîì PROBANDO M√âTODOS DE APERTURA DE EMERGENCIA...")
        
        apertura_methods = [
            ("ACUnlock", lambda: zkem.ACUnlock(CONFIG['machine_number'])),
            ("ControlDevice_1", lambda: zkem.ControlDevice(CONFIG['machine_number'], 1, 0, 0)),
            ("ControlDevice_2", lambda: zkem.ControlDevice(CONFIG['machine_number'], 2, 0, 0)),
            ("ControlDevice_3", lambda: zkem.ControlDevice(CONFIG['machine_number'], 3, 0, 0)),
            ("ControlDevice_4", lambda: zkem.ControlDevice(CONFIG['machine_number'], 4, 0, 0)),
        ]
        
        apertura_exitosa = False
        
        for method_name, method_func in apertura_methods:
            try:
                logger.info(f"üîì Probando {method_name}...")
                if method_func():
                    logger.info(f"‚úÖ ¬°PUERTA ABIERTA CON {method_name}!")
                    apertura_exitosa = True
                    time.sleep(8)  # Mantener abierta 8 segundos
                    break
                else:
                    logger.warning(f"‚ùå {method_name} fall√≥")
            except Exception as e:
                logger.debug(f"‚ùå Error en {method_name}: {e}")
        
        if not apertura_exitosa:
            logger.error("üö® NING√öN M√âTODO DE APERTURA FUNCION√ì")
        
        # HABILITAR DISPOSITIVO
        try:
            zkem.EnableDevice(CONFIG['machine_number'], 1)
            logger.info("‚úÖ Dispositivo HABILITADO")
        except:
            logger.warning("‚ö†Ô∏è Error habilitando dispositivo")
        
        # REFRESCAR CONFIGURACI√ìN
        try:
            zkem.RefreshData(CONFIG['machine_number'])
            logger.info("‚úÖ Configuraci√≥n REFRESCADA")
        except:
            logger.warning("‚ö†Ô∏è Error refrescando configuraci√≥n")
        
        # M√âTODOS DE APERTURA ADICIONALES
        if not apertura_exitosa:
            logger.info("üîì PROBANDO M√âTODOS ALTERNATIVOS...")
            
            alternative_methods = [
                ("OpenDoor", lambda: getattr(zkem, 'OpenDoor', lambda x: False)(CONFIG['machine_number'])),
                ("UnlockDoor", lambda: getattr(zkem, 'UnlockDoor', lambda x: False)(CONFIG['machine_number'])),
                ("TriggerRelay", lambda: getattr(zkem, 'TriggerRelay', lambda x: False)(CONFIG['machine_number'])),
            ]
            
            for method_name, method_func in alternative_methods:
                try:
                    logger.info(f"üîì Probando {method_name}...")
                    if method_func():
                        logger.info(f"‚úÖ ¬°PUERTA ABIERTA CON {method_name}!")
                        apertura_exitosa = True
                        time.sleep(8)
                        break
                except Exception as e:
                    logger.debug(f"‚ùå {method_name} no disponible: {e}")
        
        # Desconectar
        try:
            zkem.Disconnect()
            logger.info("üîå Desconectado")
        except:
            pass
        
        pythoncom.CoUninitialize()
        
        logger.info("üö®" * 50)
        if apertura_exitosa:
            logger.info("‚úÖ EMERGENCIA RESUELTA - PUERTA ABIERTA")
            logger.info("‚úÖ Configuraci√≥n restaurada a modo AUTOM√ÅTICO")
            logger.info("üëÜ Ahora puedes usar tu huella normalmente")
        else:
            logger.error("‚ùå EMERGENCIA NO RESUELTA - REQUIERE INTERVENCI√ìN F√çSICA")
        logger.info("üö®" * 50)
        
        return apertura_exitosa
        
    except Exception as e:
        logger.error(f"üö® ERROR CR√çTICO EN EMERGENCIA: {e}")
        return False
    finally:
        try:
            pythoncom.CoUninitialize()
        except:
            pass

# C√ìDIGO ADICIONAL DE EMERGENCIA - RESET COMPLETO
def emergency_factory_reset():
    """üö® RESET COMPLETO DEL F22 A CONFIGURACI√ìN DE F√ÅBRICA"""
    try:
        logger.info("üè≠ INTENTANDO RESET DE F√ÅBRICA...")
        
        pythoncom.CoInitialize()
        zkem = win32com.client.Dispatch("zkemkeeper.ZKEM")
        
        if zkem.Connect_Net(CONFIG['ip'], CONFIG['port']):
            logger.info("‚úÖ Conectado para reset de f√°brica")
            
            # M√©todos de reset de f√°brica
            factory_methods = [
                ("ClearData", lambda: zkem.ClearData(CONFIG['machine_number'], 5)),  # Clear options
                ("RestoreToFactoryDefault", lambda: getattr(zkem, 'RestoreToFactoryDefault', lambda x: False)(CONFIG['machine_number'])),
                ("FactoryReset", lambda: getattr(zkem, 'FactoryReset', lambda x: False)(CONFIG['machine_number'])),
            ]
            
            for method_name, method_func in factory_methods:
                try:
                    logger.info(f"üè≠ Probando {method_name}...")
                    if method_func():
                        logger.info(f"‚úÖ {method_name} ejecutado")
                        time.sleep(3)
                        return True
                except Exception as e:
                    logger.debug(f"‚ùå {method_name} fall√≥: {e}")
            
            zkem.Disconnect()
        
        pythoncom.CoUninitialize()
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Error en factory reset: {e}")
        return False

if __name__ == "__main__":
    print("üö®" * 80)
    print("C√ìDIGO DE EMERGENCIA F22 - RESTABLECIENDO CONFIGURACI√ìN")
    print("2025-06-20 08:43:22 UTC - Usuario: mupai555")
    print("üö®" * 80)
    print("PROBLEMA: F22 bloqueado, puerta no abre, acceso denegado")
    print("SOLUCI√ìN: Restablecer configuraci√≥n a modo AUTOM√ÅTICO")
    print("üö®" * 80)
    
    try:
        # Intentar reset de emergencia
        if emergency_reset_f22():
            print("\n‚úÖ EMERGENCIA RESUELTA EXITOSAMENTE")
            print("üëÜ Puedes usar tu huella ahora")
            print("üîì Puerta funcionando en modo autom√°tico")
        else:
            print("\n‚ö†Ô∏è RESET DE EMERGENCIA NO FUNCION√ì")
            print("üîß Intentando RESET DE F√ÅBRICA...")
            
            if emergency_factory_reset():
                print("‚úÖ RESET DE F√ÅBRICA EXITOSO")
                print("‚ö†Ô∏è NOTA: Puede que tengas que re-registrar huellas")
            else:
                print("‚ùå RESET DE F√ÅBRICA FALL√ì")
                print("\nüÜò SOLUCIONES F√çSICAS REQUERIDAS:")
                print("   1. üîå Desconectar F22 por 30 segundos y reconectar")
                print("   2. üîò Buscar bot√≥n RESET f√≠sico en el dispositivo")
                print("   3. üîë Usar llave f√≠sica si existe")
                print("   4. üìû Contactar soporte t√©cnico ZKTeco")
                print("   5. üìñ Consultar manual del modelo espec√≠fico")
    
    except KeyboardInterrupt:
        print("\nüö® Proceso de emergencia interrumpido")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
    finally:
        print("\nüö® C√≥digo de emergencia finalizado")